name: Node.js CI

on:
  push:
    branches: [ feat/ci ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_DATABASE: testdb
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    strategy:
      matrix:
        node-version: [20.x]
        mongodb-version: ['7.0']

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Install dependencies
      run: npm install
    
    - name: Install MongoDB tools
      run: |
        wget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | sudo apt-key add -
        echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -sc)/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
        sudo apt-get update
        sudo apt-get install -y mongodb-mongosh
    
    - name: Check MongoDB connectivity
      run: mongod "mongodb://mongodb:27017/testdb" --eval "printjson(db.stats())"

    - name: Run tests
      env:
        MONGODB_URI: mongodb://mongodb:27017/testdb
      run: npm test

    - name: Check code style
      run: npm run lint
  
  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile
        push: false
        tags: docker.io/naviat/iptoolkits:dev.${{ github.sha }}
    - name: Scan the Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docker.io/naviat/iptoolkits:dev.${{ github.sha }}'
        format: 'table'
        exit-code: '1'  # Trivy will return a non-zero exit code if vulnerabilities are found
  
    - name: Push to DockerHub
      run: |
        docker push docker.io/naviat/iptoolkits:dev.${{ github.sha }}
